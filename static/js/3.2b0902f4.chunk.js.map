{"version":3,"sources":["Components/Main/ChatPage/ChatPage.module.scss","Components/Main/ChatPage/ChatForm/ChatForm.module.scss","Components/Main/ChatPage/Message/Message.module.scss","Redux/selectors/chat-selector.ts","Components/Main/ChatPage/ChatForm/ChatForm.tsx","Components/Main/ChatPage/Message/Message.tsx","Components/Main/ChatPage/ChatPage.tsx"],"names":["module","exports","selectIsChatMessages","state","chat","messages","selectWsStatus","wsStatus","FormItem","Form","Item","ChatForm","React","memo","dispatch","useDispatch","useSelector","initialValues","messageText","validate","value","onSubmit","values","actions","setTimeout","sendMessage","setSubmitting","resetForm","isSubmitting","errors","className","s","form","formItem","name","maxLengthCreator","field","showCount","placeholder","autoFocus","component","formStyle","fieldError","SendButton","type","htmlType","disabled","Message","message","useShowMore","fullMessageText","fullText","setShowFullMessageText","setShowFullText","menu","showFullMessageText","showFullText","isMessageTextBig","isTextBig","shortMessageText","shortText","showMore","overlay","placement","size","onClick","hide","close","toggleButton","userInfo","src","photo","userPhoto","alt","nameAndMess","data-test","userName","bottomLine","ChatPage","isAuth","selectIsAuth","useState","isChatOpen","setIsChatOpen","chatPage","chatTop","icon","Chat","to","pathname","useEffect","startMessageEventListening","stopMessageEventListening","chatMessages","map","m","id"],"mappings":"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","file":"static/js/3.2b0902f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatPage\":\"ChatPage_chatPage__9WDtY\",\"chatTop\":\"ChatPage_chatTop__1sYKn\",\"icon\":\"ChatPage_icon__23E5F\",\"chat\":\"ChatPage_chat__3xZVi\",\"hide\":\"ChatPage_hide__aVUWL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ChatForm_form__A2pwj\",\"formItem\":\"ChatForm_formItem__3BguD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__10VTq\",\"userInfo\":\"Message_userInfo__iEUNO\",\"nameAndMess\":\"Message_nameAndMess__RVD-W\",\"userName\":\"Message_userName__2jaM5\",\"bottomLine\":\"Message_bottomLine__2hbma\",\"showMore\":\"Message_showMore__3N94L\"};","import { StateType } from '../store';\r\n\r\nexport const selectIsChatMessages = (state: StateType) => {\r\n    return state.chat.messages\r\n}\r\n\r\nexport const selectWsStatus = (state: StateType) => {\r\n    return state.chat.wsStatus\r\n}\r\n\r\n","import React from \"react\"\r\nimport s from './ChatForm.module.scss';\r\nimport { Form, Button, Row, Col } from \"antd\";\r\nimport { Form as FormikForm, Field, FormikHelpers, FieldProps } from \"formik\";\r\nimport { Formik, ErrorMessage } from 'formik';\r\nimport { maxLengthCreator } from \"../../../../validators/validators\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { sendMessage } from \"../../../../Redux/Chat-Reducer\";\r\nimport { selectWsStatus } from \"../../../../Redux/selectors/chat-selector\";\r\nimport formStyle from '../../../Common/formsControl/formsControl.module.scss';\r\n\r\nconst FormItem = Form.Item;\r\n\r\n\r\ntype ChatFormValuesType = {\r\n    messageText: string\r\n}\r\n\r\nexport const ChatForm: React.FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    const wsStatus = useSelector(selectWsStatus);\r\n\r\n    const submit = (values: ChatFormValuesType, actions: FormikHelpers<ChatFormValuesType>) => {\r\n        setTimeout(() => {\r\n            dispatch(sendMessage(values.messageText));\r\n            actions.setSubmitting(false);\r\n            actions.resetForm({});\r\n        }, 400);\r\n    }\r\n\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ messageText: '' }}\r\n            validate={(value) => { }}\r\n            onSubmit={submit}\r\n        >\r\n            {({ isSubmitting, errors, values }) => (\r\n                <FormikForm className={s.form}>\r\n                            <FormItem className={s.formItem}>\r\n                                <Field name=\"messageText\"\r\n                                    validate={maxLengthCreator(100)}>\r\n                                    {({ field }: FieldProps) => <TextArea showCount {...field} placeholder=\"message body\" autoFocus={true} />}\r\n                                </Field>\r\n                                <ErrorMessage name=\"messageText\" component={() => <div className={formStyle.fieldError}>{errors.messageText}</div>} />\r\n                            </FormItem>\r\n                    <Button className={s.SendButton}  type={\"primary\"} htmlType={\"submit\"} disabled={ isSubmitting || wsStatus === 'close' || !values.messageText }>\r\n                        add\r\n                    </Button>\r\n                </FormikForm>\r\n            )}\r\n        </Formik>\r\n    )\r\n});\r\n","import React from 'react'\r\nimport { MessageType } from '../../../../Api/Chat-api';\r\nimport userPhoto from '../../../../images/img.jpg'\r\nimport s from './Message.module.scss';\r\nimport { Dropdown, Button } from 'antd';\r\nimport { useShowMore } from '../../../../hooks/useShowMore';\r\n\r\n\r\ninterface IPropsType {\r\n    message: MessageType\r\n}\r\n\r\nexport const Message: React.FC<IPropsType> = React.memo(({ message }) => {\r\n\r\n    let { \r\n        fullText: fullMessageText, setShowFullText: setShowFullMessageText, menu, showFullText: showFullMessageText,\r\n        isTextBig: isMessageTextBig, shortText: shortMessageText \r\n    } = useShowMore(message.message, 20, 'Message')\r\n    \r\n\r\n    const showMore = <span className={s.showMore}>{isMessageTextBig\r\n        ? <Dropdown overlay={menu} placement=\"topCenter\">\r\n            <Button size={'small'} onClick={() => {\r\n                setShowFullMessageText(true)\r\n            }}>\r\n                more\r\n            </Button>\r\n        </Dropdown>\r\n        : null}</span>\r\n\r\n    const hide = <Button className={s.close} size={'small'} onClick={() => {\r\n        setShowFullMessageText(false)\r\n    }}>\r\n        hide\r\n    </Button>\r\n\r\n    const toggleButton = showFullMessageText ? hide : showMore\r\n    let messageText = message.message \r\n\r\n    if(isMessageTextBig) {\r\n        messageText = shortMessageText + '...'\r\n    } else {\r\n        messageText = fullMessageText\r\n    }\r\n\r\n    return (\r\n        <div className={s.message}>\r\n            <div className={s.userInfo}>\r\n                <div>\r\n                    <img src={message.photo || userPhoto} alt=\"uerPhoto\" />\r\n                </div>\r\n                <div className={s.nameAndMess}>\r\n                    <div data-test={'userNameTest'} className={s.userName}>\r\n                        {message.userName}\r\n                    </div>\r\n                    <div className={s.message}>\r\n                        <div>\r\n                            message:\r\n                        </div>\r\n                        <span>\r\n                            {showFullMessageText ? fullMessageText : messageText}\r\n                        </span>\r\n                    </div>\r\n                    <div>{isMessageTextBig ? toggleButton : null} </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.bottomLine}>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, { useEffect, useState } from \"react\";\r\nimport s from './ChatPage.module.scss';\r\nimport { ChatForm } from \"./ChatForm/ChatForm\";\r\nimport { Message } from \"./Message/Message\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { startMessageEventListening, stopMessageEventListening } from \"../../../Redux/Chat-Reducer\";\r\nimport { selectIsChatMessages } from \"../../../Redux/selectors/chat-selector\";\r\nimport ReactScrollableFeed from 'react-scrollable-feed'\r\nimport { selectIsAuth } from \"../../../Redux/selectors/auth-selector\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { BsChatDots } from 'react-icons/bs';\r\nimport { IoIosArrowUp, IoIosArrowDown } from 'react-icons/io';\r\n\r\n\r\nconst ChatPage: React.FC = React.memo(() => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const [isChatOpen, setIsChatOpen] = useState(true)\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={{\r\n            pathname: \"/login\"\r\n        }} />\r\n    }\r\n    return (\r\n        <div className={`${s.chatPage} ${isChatOpen ? '' : s.hide}`}>\r\n            <div className={s.chatTop}>\r\n                <div>\r\n                    <span> Chat </span>\r\n                    <BsChatDots />\r\n                </div>\r\n                <div className={s.icon} onClick={() => {\r\n                    setIsChatOpen(!isChatOpen)\r\n                }}>\r\n                    {isChatOpen ? <IoIosArrowDown /> : <IoIosArrowUp />}\r\n                </div>\r\n            </div>\r\n            <Chat />\r\n            <ChatForm />\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport const Chat: React.FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n    const messages = useSelector(selectIsChatMessages)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessageEventListening())\r\n        return () => {\r\n            dispatch(stopMessageEventListening())\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n    const chatMessages = messages.map((m) => <Message key={m.id}\r\n        message={m} />)\r\n\r\n    return (\r\n        <div className={s.chat} >\r\n            <ReactScrollableFeed >\r\n                {chatMessages}\r\n            </ReactScrollableFeed>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\nexport default ChatPage;\r\n"],"sourceRoot":""}